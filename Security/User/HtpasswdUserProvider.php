<?php

/**
 * This file is part of the Ksn135HtpasswdBundle package.
 *
 * (c) Serg N. Kalachev <serg@kalachev.ru>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Ksn135\HtpasswdBundle\Security\User;

use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\AuthenticationException;

class HtpasswdUserProvider implements UserProviderInterface
{
    private $users;

    /**
     * Constructor.
     *
     * The htpasswd_file is a full pathname to file with user info, generated by htpasswd utility
     *
     * @param string $htpasswd_file A full pathname to a file
     */
    public function __construct($htpasswd_file)
    {
        $this->users = array();

        if ( !file_exists($htpasswd_file)) 
            throw new AuthenticationException(sprintf('Can\'t open for reading file "%s".', $htpasswd_file));

        foreach(file($htpasswd_file) as $l)
        {
            $array = explode(':',$l);
            $user = new HtpasswdUser($array[0], chop($array[1]), array( 'ROLE_USER' ));
            $this->createUser($user);
        }
    }

    /**
     * Adds a new User to the provider.
     *
     * @param UserInterface $user A UserInterface instance
     *
     * @throws \LogicException
     */
    public function createUser(UserInterface $user)
    {
        if (isset($this->users[strtolower($user->getUsername())])) {
            throw new \LogicException('Another user with the same username already exist.');
        }

        $this->users[strtolower($user->getUsername())] = $user;
    }

    public function loadUserByUsername($username)
    {
        if (!isset($this->users[strtolower($username)])) {
            $ex = new UsernameNotFoundException(sprintf('Username "%s" does not exist.', $username));
            $ex->setUsername($username);

            throw $ex;
        }

        $user = $this->users[strtolower($username)];

        return new HtpasswdUser($user->getUsername(), $user->getPassword(), $user->getRoles());
    }    

    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof HtpasswdUser) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class)
    {
        return $class === 'Ksn135\HtpasswdBundle\Security\User\HtpasswdUserProvider';
    }
}